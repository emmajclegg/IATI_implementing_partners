}
id <- "GB-GOV-3-CSSF-01-000005"
activity_transactions <- transactions_extract(1,id)
linked_activities <- data.frame()
linked_activities <- data.frame()
# Extract activity data for each government department
for (activity in uk_gov_list$iati_identifier) {
new_rows <- 0
page <- 1
while (page == 1 | new_rows > 0) {
print(paste0(activity, "-", page))
x <- nrow(linked_activities)
new_activities <- transactions_extract(page, activity)
if nrow(new_activities) > 0 {
nrow(activity_transactions)
linked_activities <- data.frame()
# Extract activity data for each government department
for (activity in uk_gov_list$iati_identifier) {
new_rows <- 0
page <- 1
while (page == 1 | new_rows > 0) {
print(paste0(activity, "-", page))
x <- nrow(linked_activities)
new_activities <- transactions_extract(page, activity)
if (nrow(new_activities) > 0) {
linked_activities <- rbind(linked_activities, new_activities)
}
page <- page + 1
y <- nrow(linked_activities)
print(y)
new_rows = y - x
print(new_rows)
}
}
id <- "GB-GOV-3-CSSF"
activity_transactions <- transactions_extract(1,id)
linked_activities <- data.frame()
# Extract activity data for each government department
for (activity in uk_gov_list$iati_identifier) {
new_rows <- 0
page <- 1
while (page == 1 | new_rows > 0) {
print(paste0(activity, "-", page))
x <- nrow(linked_activities)
new_activities <- transactions_extract(page, activity)
if (nrow(new_activities) > 0) {
linked_activities <- rbind(linked_activities, new_activities)
}
page <- page + 1
y <- nrow(linked_activities)
print(y)
new_rows = y - x
print(new_rows)
}
}
linked_activities <- data.frame()
# Extract activity data for each government department
for (act in uk_gov_list$iati_identifier) {
new_rows <- 0
page <- 1
while (page == 1 | new_rows > 0) {
print(paste0(act, "-", page))
x <- nrow(linked_activities)
new_activities <- transactions_extract(page, act)
if (nrow(new_activities) > 0) {
linked_activities <- rbind(linked_activities, new_activities)
}
page <- page + 1
y <- nrow(linked_activities)
print(y)
new_rows = y - x
print(new_rows)
}
}
View(uk_gov_list)
### Check and install packages ----
packages <- data.frame(installed.packages())
if (!("jsonlite" %in% packages$Package)) {
install.packages("jsonlite")
}
if (!("httr" %in% packages$Package)) {
install.packages("httr")
}
if (!("tidyverse" %in% packages$Package)) {
install.packages("tidyverse")
}
if (!("dplyr" %in% packages$Package)) {
install.packages("dplyr")
}
if (!("readxl" %in% packages$Package)) {
install.packages("readxl")
}
if (!("writexl" %in% packages$Package)) {
install.packages("writexl")
}
if (!("googlesheets4" %in% packages$Package)) {
install.packages("googlesheets4")
}
if (!("gargle" %in% packages$Package)) {
install.packages("gargle")
}
if (!("openxlsx" %in% packages$Package)) {
install.packages("openxlsx")
} # for adding hyperlinks and formatting to output Excel reports
if (!("DBI" %in% packages$Package)) {
install.packages("DBI")
} # for read/writing to Excel database
if (!("odbc" %in% packages$Package)) {
install.packages("odbc")
}
if (!("countrycode" %in% packages$Package)) {
install.packages("countrycode")
}
if (!("testthat" %in% packages$Package)) {
install.packages("testthat")
}
library(jsonlite)
library(httr)
library(tidyverse)
library(dplyr)
library(readxl)
library(writexl)
library(googlesheets4)
library(gargle)
library(openxlsx)
library(DBI)
library(odbc)
library(countrycode)
library(testthat)
### Set authentication
load_dot_env()
### Set authentication
api_key = Sys.getenv("API_KEY")
authentication = add_headers(`Ocp-Apim-Subscription-Key` = api_key)
# As flat JSON
activity_extract_flat <- function(activity_id) {
path <- paste0(
'https://api.iatistandard.org/datastore/activity/select?',
'q=iati_identifier:"',
activity_id,
'"&wt=json',
"&fl=other_identifier*,reporting_org*,location*,default_flow_type*,activity_date*,budget*,policy_marker*,activity_status*,hierarchy*,title*,description*,participating_org*,related_activity*",
"&wt=json"
)
request <- GET(url = path, authentication)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
activity_json <- response$response$docs
return(activity_json)
}
# As hierarchical JSON
activity_extract_hierarchy <- function(activity_id) {
path <- paste0(
'https://api.iatistandard.org/datastore/activity/iati_json?',
'q=iati_identifier:"',activity_id,'"'
)
request <- GET(url = path, authentication)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
activity_json <- response$response$docs$`iati_json.iati-activity`[[1]]
return(activity_json)
}
# Tests
id <- "GB-1-203166-103"
result_flat <- activity_extract_flat(id)
result_hierarchy <- activity_extract_hierarchy(id)
### Set authentication
api_key = Sys.getenv("API_KEY")
authentication = add_headers(`Ocp-Apim-Subscription-Key` = api_key)
# As flat JSON
activity_extract_flat <- function(activity_id) {
path <- paste0(
'https://api.iatistandard.org/datastore/activity/select?',
'q=iati_identifier:"',
activity_id,
'"&wt=json',
"&fl=other_identifier*,reporting_org*,location*,default_flow_type*,activity_date*,budget*,policy_marker*,activity_status*,hierarchy*,title*,description*,participating_org*,related_activity*",
"&wt=json"
)
request <- GET(url = path, authentication)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
activity_json <- response$response$docs
return(activity_json)
}
# As hierarchical JSON
activity_extract_hierarchy <- function(activity_id) {
path <- paste0(
'https://api.iatistandard.org/datastore/activity/iati_json?',
'q=iati_identifier:"',activity_id,'"'
)
request <- GET(url = path, authentication)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
activity_json <- response$response$docs$`iati_json.iati-activity`[[1]]
return(activity_json)
}
# Tests
id <- "GB-1-203166-103"
result_flat <- activity_extract_flat(id)
result_hierarchy <- activity_extract_hierarchy(id)
org_activity_extract <- function(page, org_code) {
rows = 1000
start <- (page - 1) * rows
path <- paste0('https://api.iatistandard.org/datastore/activity/select?',
'q=reporting_org_ref:"',
org_code,
'"&wt=json',
'&rows=',rows,
'&start=',start,
"&fl=iati_identifier,activity_date*,reporting_org*,activity_status*,title*,description*")
request <- GET(url = path, authentication)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
new_data <- response$response$docs
numb_data <- response$response$numFound
if(start >= numb_data){
return(NULL)
}
return(new_data)
}
# Tests
org_id <- "GB-GOV-7"
result_orgs <- org_activity_extract(1, org_id)
### Set authentication
load_dot_env()
if (!("dotenv" %in% packages$Package)) {
install.packages("dotenv")
}
library(dotenv)
### Set authentication
load_dot_env()
### Set authentication
load_dot_env()
api_key = Sys.getenv("API_KEY")
authentication = add_headers(`Ocp-Apim-Subscription-Key` = api_key)
# As flat JSON
activity_extract_flat <- function(activity_id) {
path <- paste0(
'https://api.iatistandard.org/datastore/activity/select?',
'q=iati_identifier:"',
activity_id,
'"&wt=json',
"&fl=other_identifier*,reporting_org*,location*,default_flow_type*,activity_date*,budget*,policy_marker*,activity_status*,hierarchy*,title*,description*,participating_org*,related_activity*",
"&wt=json"
)
request <- GET(url = path, authentication)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
activity_json <- response$response$docs
return(activity_json)
}
# As hierarchical JSON
activity_extract_hierarchy <- function(activity_id) {
path <- paste0(
'https://api.iatistandard.org/datastore/activity/iati_json?',
'q=iati_identifier:"',activity_id,'"'
)
request <- GET(url = path, authentication)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
activity_json <- response$response$docs$`iati_json.iati-activity`[[1]]
return(activity_json)
}
# Tests
id <- "GB-1-203166-103"
result_flat <- activity_extract_flat(id)
result_hierarchy <- activity_extract_hierarchy(id)
org_activity_extract <- function(page, org_code) {
rows = 1000
start <- (page - 1) * rows
path <- paste0('https://api.iatistandard.org/datastore/activity/select?',
'q=reporting_org_ref:"',
org_code,
'"&wt=json',
'&rows=',rows,
'&start=',start,
"&fl=iati_identifier,activity_date*,reporting_org*,activity_status*,title*,description*")
request <- GET(url = path, authentication)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
new_data <- response$response$docs
numb_data <- response$response$numFound
if(start >= numb_data){
return(NULL)
}
return(new_data)
}
# Tests
org_id <- "GB-GOV-7"
result_orgs <- org_activity_extract(1, org_id)
## 3. Function to extract transactions for a specified IATI activity ID
transactions_extract <- function(page, activity_id) {
rows = 1000
start <- (page - 1) * rows
path  <- paste0('https://api.iatistandard.org/datastore/transaction/select?',
'q=transaction_provider_org_provider_activity_id:"',
activity_id,
'"&wt=json',
'&rows=',rows,
'&start=',start,
"&fl=iati_identifier,transaction_provider_org_provider_activity_id")
request <- GET(url = path, authentication)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
new_data <- unique(response$response$docs)
numb_data <- response$response$numFound
if(start >= numb_data){
return(NULL)
}
return(new_data)
}
id <- "GB-1-203166-103"
activity_transactions <- transactions_extract(1,id)
View(activity_transactions)
# Define UK government department IATI org IDs
organisation_codes <- c("GB-GOV-7")
# Prepare output data frame
uk_gov_list <- data.frame()
# Extract activity data for each government department
for (org in organisation_codes) {
new_rows <- 0
page <- 1
while (page == 1 | new_rows > 0) {
print(paste0(org, "-", page))
x <- nrow(uk_gov_list)
print(x)
new_activities <- org_activity_extract(page, org)
uk_gov_list <- rbind(uk_gov_list, new_activities)
page <- page + 1
y <- nrow(uk_gov_list)
print(y)
new_rows = y - x
print(new_rows)
}
}
View(uk_gov_list)
# Define UK government department IATI org IDs
organisation_codes <- c("GB-GOV-7", "GB-GOV-10")
# Prepare output data frame
uk_gov_list <- data.frame()
# Extract activity data for each government department
for (org in organisation_codes) {
new_rows <- 0
page <- 1
while (page == 1 | new_rows > 0) {
print(paste0(org, "-", page))
x <- nrow(uk_gov_list)
print(x)
new_activities <- org_activity_extract(page, org)
uk_gov_list <- rbind(uk_gov_list, new_activities)
page <- page + 1
y <- nrow(uk_gov_list)
print(y)
new_rows = y - x
print(new_rows)
}
}
View(uk_gov_list)
# Save output data
saveRDS(uk_gov_list, file = "Outputs/uk_gov_list.rds")
# Extract basic activity information - hierarchy and status
gov_list_base <- uk_gov_list %>%
select(reporting_org_ref,
reporting_org_narrative,
iati_identifier,
title_narrative,
activity_status_code,
description_narrative) %>%
unique()
View(gov_list_base)
linked_activities <- data.frame()
# Define UK government department IATI org IDs
organisation_codes <- c("GB-GOV-1")
# Prepare output data frame
uk_gov_list <- data.frame()
# Extract activity data for each government department
for (org in organisation_codes) {
new_rows <- 0
page <- 1
while (page == 1 | new_rows > 0) {
print(paste0(org, "-", page))
x <- nrow(uk_gov_list)
print(x)
new_activities <- org_activity_extract(page, org)
uk_gov_list <- rbind(uk_gov_list, new_activities)
page <- page + 1
y <- nrow(uk_gov_list)
print(y)
new_rows = y - x
print(new_rows)
}
}
# Save output data
saveRDS(uk_gov_list, file = "Outputs/uk_gov_list.rds")
linked_activities <- data.frame()
# Extract activity data for each government department
for (act in uk_gov_list$iati_identifier) {
new_rows <- 0
page <- 1
while (page == 1 | new_rows > 0) {
print(paste0(act, "-", page))
x <- nrow(linked_activities)
new_activities <- linked_activity_extract(page, act)
if (nrow(new_activities) > 0) {
linked_activities <- rbind(linked_activities, new_activities)
}
page <- page + 1
y <- nrow(linked_activities)
print(y)
new_rows = y - x
print(new_rows)
}
}
## 3. Function to extract activities with a given provider activity id in their transactions
linked_activity_extract <- function(page, activity_id) {
rows = 1000
start <- (page - 1) * rows
path  <- paste0('https://api.iatistandard.org/datastore/transaction/select?',
'q=transaction_provider_org_provider_activity_id:"',
activity_id,
'"&wt=json',
'&rows=',rows,
'&start=',start,
"&fl=iati_identifier,transaction_provider_org_provider_activity_id")
request <- GET(url = path, authentication)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
new_data <- unique(response$response$docs)
numb_data <- response$response$numFound
if(start >= numb_data){
return(NULL)
}
return(new_data)
}
# Extract activity data for each government department
for (act in uk_gov_list$iati_identifier) {
new_rows <- 0
page <- 1
while (page == 1 | new_rows > 0) {
print(paste0(act, "-", page))
x <- nrow(linked_activities)
new_activities <- linked_activity_extract(page, act)
if (nrow(new_activities) > 0) {
linked_activities <- rbind(linked_activities, new_activities)
}
page <- page + 1
y <- nrow(linked_activities)
print(y)
new_rows = y - x
print(new_rows)
}
}
linked_activities <- data.frame()
# Extract activity data for each government department
for (act in uk_gov_list$iati_identifier) {
new_rows <- 0
page <- 1
while (page == 1 | new_rows > 0) {
print(paste0(act, "-", page))
x <- nrow(linked_activities)
new_activities <- linked_activity_extract(page, act)
linked_activities <- rbind(linked_activities, new_activities)
page <- page + 1
y <- nrow(linked_activities)
print(y)
new_rows = y - x
print(new_rows)
}
}
## 3. Function to extract activities with a given provider activity id in their transactions
linked_activity_extract <- function(page, activity_id) {
rows = 1000
start <- (page - 1) * rows
path  <- paste0('https://api.iatistandard.org/datastore/transaction/select?',
'q=transaction_provider_org_provider_activity_id:"',
activity_id,
'"&wt=json',
'&rows=',rows,
'&start=',start,
"&fl=iati_identifier,transaction_provider_org_provider_activity_id")
request <- GET(url = path, authentication)
response <- content(request, as = "text", encoding = "UTF-8")
response <- fromJSON(response, flatten = TRUE)
new_data <- unique(response$response$docs)
# numb_data <- response$response$numFound
#
# if(start >= numb_data){
#   return(NULL)
# }
return(new_data)
}
linked_activities <- data.frame()
# Extract activity data for each government department
for (act in uk_gov_list$iati_identifier) {
new_rows <- 0
page <- 1
while (page == 1 | new_rows > 0) {
print(paste0(act, "-", page))
x <- nrow(linked_activities)
new_activities <- linked_activity_extract(page, act)
linked_activities <- rbind(linked_activities, new_activities)
page <- page + 1
y <- nrow(linked_activities)
print(y)
new_rows = y - x
print(new_rows)
}
}
View(linked_activities)
# Save output data
saveRDS(linked_activities, file = "Outputs/linked_activities.rds")
